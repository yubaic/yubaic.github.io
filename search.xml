<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从零开始搭建自己的.Net Core Api框架-创建</title>
    <url>/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>以.Net Core 为框架，版本为3.1， 集成 Swagger作为接口显示文档， 集成SqlSugar作为数据库操作ORM。<br><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/1.jpg" alt="创建"></p>
<h2 id="创建完成"><a href="#创建完成" class="headerlink" title="创建完成"></a>创建完成</h2><p><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/2.jpg" alt="创建完成"></p>
<h2 id="引入swagger"><a href="#引入swagger" class="headerlink" title="引入swagger"></a>引入swagger</h2><h3 id="安装swagger插件"><a href="#安装swagger插件" class="headerlink" title="安装swagger插件"></a>安装swagger插件</h3><p>引入swagger插件有两种办法<br>  1、从github上直接下载源码<br>  2、直接用NuGet包添加程序集应用<br>如果无需修改源码的话直接使用第2种方式<br><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/3.jpg" alt="安装swaggerNuGet包"></p>
<h3 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h3><p>打开Startup.cs类，编辑ConfigureServices类</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// This method gets called by the runtime. Use this method to add services to the container.</span><br><span class="line">   public void ConfigureServices(IServiceCollection services)</span><br><span class="line">       &#123;</span><br><span class="line">           services.AddControllers();</span><br><span class="line">           <span class="comment">#region Swagger</span></span><br><span class="line">           // 添加Swagger</span><br><span class="line">           services.AddSwaggerGen(c =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               c.SwaggerDoc(<span class="string">&quot;v1&quot;</span>, new OpenApiInfo &#123; Title = <span class="string">&quot;API Demo&quot;</span>, Version = <span class="string">&quot;v1&quot;</span> &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="comment">#endregion</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>编辑Configure类</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br><span class="line">        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.UseHttpsRedirection();</span><br><span class="line"></span><br><span class="line">            app.UseRouting();</span><br><span class="line"></span><br><span class="line">            app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapControllers();</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">#region Swagger</span></span><br><span class="line">            app.UseSwagger();</span><br><span class="line">            app.UseSwaggerUI(c =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                c.SwaggerEndpoint(<span class="string">&quot;/swagger/v1/swagger.json&quot;</span>, <span class="string">&quot;API Demo v1&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">#endregion</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建业务逻辑层"><a href="#创建业务逻辑层" class="headerlink" title="创建业务逻辑层"></a>创建业务逻辑层</h2><p><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/4.jpg" alt="创建业务逻辑层"><br>该层只做业务逻辑的相关运算，不会对数据库进行任何直接的操作。</p>
<h2 id="创建数据接口层"><a href="#创建数据接口层" class="headerlink" title="创建数据接口层"></a>创建数据接口层</h2><p><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/IDAL.jpg" alt="创建数据接口层"><br>该层为数据接口层，里面只罗列了相应的接口函数，但是具体的函数功能实现则交给继承该数据接口的数据层来实现。</p>
<h2 id="创建数据层"><a href="#创建数据层" class="headerlink" title="创建数据层"></a>创建数据层</h2><p><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/DAL.jpg" alt="创建数据层"><br>该层负责直接或者间接对数据库进行操作</p>
<h2 id="创建实体层"><a href="#创建实体层" class="headerlink" title="创建实体层"></a>创建实体层</h2><p><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/Entity.jpg" alt="创建实体层"><br>该层为实体类层，存储了数据库对应的所有实体，实体一般和数据库表是一一对应的。</p>
<h2 id="创建模型层"><a href="#创建模型层" class="headerlink" title="创建模型层"></a>创建模型层</h2><p><img src="/2021/09/01/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/Model.jpg" alt="创建模型层"><br>该层存放了一些系统帮助类，或是实体辅助类。</p>
]]></content>
  </entry>
  <entry>
    <title>从零开始-集成轻量级ORM框架——SqlSugar</title>
    <url>/2021/09/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-%E9%9B%86%E6%88%90%E8%BD%BB%E9%87%8F%E7%BA%A7ORM%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94SqlSugar/</url>
    <content><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>1）使用NuGet上的包<br>2）从GitHub上下载源码<br>考虑到后续有可能会需要修改源码，使用了第二种方式</p>
<p>将下载好的SqlSugar文件夹复制到包含主项目的同级文件夹下<br><img src="/2021/09/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-%E9%9B%86%E6%88%90%E8%BD%BB%E9%87%8F%E7%BA%A7ORM%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94SqlSugar/1.jpg" alt="1"><br><img src="/2021/09/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-%E9%9B%86%E6%88%90%E8%BD%BB%E9%87%8F%E7%BA%A7ORM%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94SqlSugar/2.jpg" alt="2"><br>选择SqlSugar文件夹下面的SqlSugar.csproj文件<br><img src="/2021/09/06/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-%E9%9B%86%E6%88%90%E8%BD%BB%E9%87%8F%E7%BA%A7ORM%E6%A1%86%E6%9E%B6%E2%80%94%E2%80%94SqlSugar/3.jpg" alt="3"></p>
]]></content>
  </entry>
</search>
